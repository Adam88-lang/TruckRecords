// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckRecords.Models;

#nullable disable

namespace TruckRecords.Migrations
{
    [DbContext(typeof(TRDbContext))]
    [Migration("20240112191154_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TruckRecords.Models.BuildRecord", b =>
                {
                    b.Property<int>("BuildRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildRecordID"));

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckID")
                        .HasColumnType("int");

                    b.HasKey("BuildRecordID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("TruckID");

                    b.ToTable("BuildRecords");
                });

            modelBuilder.Entity("TruckRecords.Models.Component", b =>
                {
                    b.Property<int>("ComponentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentID");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TruckRecords.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<string>("TestDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TruckRecords.Models.TestResult", b =>
                {
                    b.Property<int>("TestResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultID"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateConducted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestID")
                        .HasColumnType("int");

                    b.Property<int?>("TruckID")
                        .HasColumnType("int");

                    b.HasKey("TestResultID");

                    b.HasIndex("TestID");

                    b.HasIndex("TruckID");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("TruckRecords.Models.Truck", b =>
                {
                    b.Property<int>("TruckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckID"));

                    b.Property<DateTime>("AssemblyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TruckID");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("TruckRecords.Models.BuildRecord", b =>
                {
                    b.HasOne("TruckRecords.Models.Component", "Component")
                        .WithMany("BuildRecords")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckRecords.Models.Truck", "Truck")
                        .WithMany("BuildRecords")
                        .HasForeignKey("TruckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckRecords.Models.TestResult", b =>
                {
                    b.HasOne("TruckRecords.Models.Test", null)
                        .WithMany("TestResults")
                        .HasForeignKey("TestID");

                    b.HasOne("TruckRecords.Models.Truck", null)
                        .WithMany("TestResults")
                        .HasForeignKey("TruckID");
                });

            modelBuilder.Entity("TruckRecords.Models.Component", b =>
                {
                    b.Navigation("BuildRecords");
                });

            modelBuilder.Entity("TruckRecords.Models.Test", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("TruckRecords.Models.Truck", b =>
                {
                    b.Navigation("BuildRecords");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
